---
title: "R 스니펫"
author: "Leanne Vicente"
date: "2023/5/15"
eval: false
output: html_document
---

## 개요

코드 스니펫은 일반적인 코드 스니펫을 빠르게 삽입하는 데 사용되는 텍스트 매크로입니다. (SAS Studio의 스니펫 옵션과 유사합니다). 일반적인 코드 조각을 삽입하거나 프로그래머가 따를 템플릿을 설정하는 데 사용할 수 있습니다. 스크립트를 작성할 때 시간을 절약할 수 있는 좋은 방법입니다.

모든 코드 스니펫은 메뉴를 통해 탐색할 수 있는 특수 RStudio 텍스트 파일에 저장됩니다.
`도구` -> `전역 옵션` -> `코드` -> `스니펫 편집`으로 이동합니다.

스니펫을 삽입하려면 R 스크립트 또는 RMarkdown 파일에서 스니펫 이름을 입력하기 시작합니다. 예를 들어 'fun'을 입력하면 몇 가지 옵션이 자동으로 표시되고 첫 번째 옵션이 'fun' 스니펫임을 알 수 있습니다. 그것을 선택하면 아래에 언급된 대로 R 함수 정의가 삽입됩니다:


```{r function1}

```

완성 목록에서 스니펫을 선택하면 입력하여 채울 수 있는 여러 텍스트 자리 표시자와 함께 삽입된 다음 Tab 키를 눌러 다음 자리 표시자로 이동합니다:

```{r function2}
name <- function(variables) {
  
}
```

스니펫은 일반적으로 사용되는 코드를 자동으로 삽입하는 좋은 방법이며 R, C/C++, JavaScript 및 기타 여러 언어에서 사용할 수 있습니다.
기본적으로 입력 일시 중지 시 완성 목록이 자동으로 표시되지만 Tab 키를 통해 수동으로 활성화할 수도 있습니다.
스니펫에 대한 문자 시퀀스를 입력하고 즉시 삽입하려는 경우(완성 목록을 거치지 않고) Shift+Tab을 누를 수 있습니다.
*참고*: R Markdown 문서 내의 Markdown 스니펫의 경우 Markdown 편집 모드 내에서 표준 탭 완성을 사용할 수 없으므로 항상 Shift+Tab 시퀀스를 사용해야 합니다.

## 일반적으로 유용한 스니펫
1. `lib` = library()
2. `req` = require()
3. `source` = source() 
4. 	데이터 프레임 정의를 위한 `df`
5.	행렬 정의를 위한 `mat`
6.	조건식을 위한 `if`, `el` 및 `ei`
7.	apply 함수 계열을 위한 `apply`, `lapply`, `sapply` 등
8.	기본 샤이니 앱 구조 정의를 위한 `shinyapp`


```{r common_snip}
#| eval: false
```

## 스니펫 사용자 지정
SAS Studio에서와 같이 자신만의 스니펫을 만들고 나중에 사용할 수 있도록 저장할 수도 있습니다. 내장된 스니펫 정의를 편집하여 필요에 더 구체적으로 만들 수도 있습니다.

콘솔에서 `usethis` 패키지를 사용하여 스니펫 파일에 액세스할 수 있습니다. 이 패키지에는 편집을 위해 파일을 팝업하는 `edit_rstudio_snippet()` 함수가 있습니다.

```{r usethis}
#| eval: false
install.packages("usethis")
library(usethis)
edit_rstudio_snippets(type = c("r"))
```

이렇게 하면 R 코드에 대한 스니펫이 열리지만 작성할 수 있는 여러 가지 다른 유형의 스니펫이 있습니다. 스니펫을 편집하려는 스니펫 유형을 대체하십시오. 다음은 스니펫을 작성할 수 있는 다양한 코드 유형 목록입니다:
- "r" 
- "markdown"
- "c_cpp"
- "css"
- "html"
- java"
- "javascript"
- "python",
- "sql"
- "stan"
- "tex"

메뉴를 통해 파일을 보려면 도구 -> 전역 옵션 -> 코드 -> 스니펫 편집으로 이동하십시오.

모든 스니펫은 `snippet` 키워드를 사용하여 정의됩니다. 스니펫의 내용은 *Tab* 키를 사용하여 아래에 들여쓰기해야 합니다(공백 사용과 반대). 변수는 `{1:varname}` 형식을 사용하여 정의할 수 있습니다. 또한 `$`는 스니펫의 각 섹션을 완료한 후 커서가 점프해야 하는 위치를 나타내는 특수 문자로 사용되며 리터럴 $를 삽입하려면 `\$`로 이스케이프해야 합니다.

새 스니펫을 추가하려면 스니펫 편집기 하단으로 스크롤하여 스니펫을 추가하십시오. 각 스니펫은 줄 시작 부분에 `snippet`이라는 단어로 시작하고 공백이 뒤따른 다음 스니펫 이름이 옵니다.

사용자 생성 스니펫에 대한 명명 규칙을 설정하여 자신의 것과 내장된 스니펫을 구별할 수 있습니다. 예: 스니펫 이름을 my_underscore로 시작하거나 사용자 이름 또는 이니셜로 시작합니다. 이렇게 하면 스크립트 창에 `my_`를 입력하기 시작하면 모든 사용자 생성 스니펫이 드롭다운 목록에 표시됩니다.

스니펫을 사용하여 프로그램 설정 방법, 자주 사용하는 라이브러리 로드 또는 원하는 대로 정확하게 설정된 모든 색상, 레이블, 제목 및 사양으로 플롯용 코드를 저장하는 템플릿을 만들 수 있습니다.

*참고*: 스니펫 [스니펫 이름] 뒤의 모든 줄은 단일 탭으로 시작해야 합니다. 공백을 사용하여 코드를 들여쓰면 스니펫이 작동하지 않습니다. 그렇지 않으면 평소와 같이 코드를 작성하십시오.
저장을 클릭하고 기본 설정 창을 종료합니다. 이제 스니펫을 사용할 수 있습니다. 콘솔, RMarkdown 문서 또는 R 스크립트에서 스니펫 이름을 입력한 다음 탭을 누릅니다. 코드가 나타나야 합니다.

## 스니펫 예제
# 헤더 템플릿

스니펫의 용도 중 하나는 프로그래머가 모든 스크립트에 사용할 수 있는 헤더 템플릿을 만드는 것입니다. 자신의 프로그램 헤더에 대한 시작점으로 자유롭게 사용하십시오.
```{r header_snip}
#| eval: false
######################################################################
#
#목적: ${1:plot_type} 플롯 생성
#' ---
#' 제목: ""
#' 저자: ""
#' 날짜: ""
#' ---
#
#가정: -없음-
#
#호출 대상: ${2:plot_name}.R
#
#입력: 
#  ${3:data_input}.sas7bdat
#          
#출력: TOT에 따라 PDF/HTML 그래프 파일 
#
#참조: 
#   그래프 모형 참조
#
#사용 참고 사항: 이 보고서는 피험자 수준에서 플롯됩니다.
######################################################################
#기록
######################################################################
#개정    저자        날짜       설명
#1.1       ${4:author}    ${5:date}    초기 생성
######################################################################

```
 

# 라이브러리 스니펫
이 스니펫은 작업 디렉토리를 설정한 다음 가장 자주 필요하거나 사용하는 패키지를 로드합니다.

```{r}
######################################################################
path1 <- getwd()

library(knitr)
library(tinytex)
library(rio)
library(tidyverse)
library(rmarkdown)
######################################################################

```


# 플롯 스니펫
원하는 대로 그래프를 설정하고 조정하는 데 상당한 시간을 할애했다면 다시 사용하고 싶을 것입니다!

```{r}
######################################################################
ggplot(${1:data}, aes(x=${2:variable}, y=${3:variable})) + 
  geom_col(color = "black", fill="#0072B2") +
  theme_minimal() +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray"),
        plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5)
  ) +
  scale_y_continuous(label = comma) + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=${3:variable}), vjust=1.5, colour="white", position=position_dodge(.9), size=5) +
  ggtitle("<텍스트 입력>", subtitle = "<텍스트 입력>")
######################################################################

```

알림, 미니 프로젝트 7과 11에서는 계속해서 사용하는 코드 청크에 대한 함수 작성에 대해 논의했습니다. 재사용을 위해 위 코드에 대한 함수를 만들 수도 있습니다.


##참조
-	https://rstudio.github.io/rstudio-extensions/rstudio_snippets.html 
-	https://support.posit.co/hc/en-us/articles/204463668-Code-Snippets 
-	https://dcl-workflow.stanford.edu/rstudio-snippets.html 
-	https://www.infoworld.com/article/3396616/how-to-use-rstudio-code-snippets.html 
-	https://usethis.r-lib.org/ 
- https://cran.r-project.org/web/packages/usethis/index.html 
- https://usethis.r-lib.org/reference/edit.html

